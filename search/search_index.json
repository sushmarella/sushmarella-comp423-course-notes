{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Sushant's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Go setup","text":"<ul> <li>Primary author: Sushant Marella (https://github.com/sushmarella)</li> <li>Reviewer: Aidan Lee (https://github.com/aidanjlee5)</li> </ul> <p>Create a New Go Project</p> <p>In a terminal (on your host machine, not inside a container), create a folder for your Go project. This folder will house your code and Dev Container configurations:</p> <pre><code>mkdir hello-go\ncd hello-go\n</code></pre>"},{"location":"tutorials/go-setup/#initialize-a-git-repository","title":"Initialize a Git Repository","text":"<p>Initialize a new Git repository inside this folder:</p> <pre><code>git init\n</code></pre>"},{"location":"tutorials/go-setup/#add-a-readmemd","title":"Add a README.md","text":"<p>Create a README file: </p> <pre><code>echo \"COMP423 Go Tutorial: https://sushmarella.github.io/sushmarella-comp423-course-notes/tutorials/go-setup/\" &gt; README.md\n</code></pre>"},{"location":"tutorials/go-setup/#3-dev-container-configuration","title":"3. Dev Container Configuration","text":"<p>Inside <code>hello-go</code>, create a hidden folder named <code>.devcontainer</code> and a file named <code>devcontainer.json</code>:</p> <pre><code>mkdir .devcontainer\ntouch .devcontainer/devcontainer.json\n</code></pre> <p>Open <code>devcontainer.json</code> in your editor and add the following content:</p> .devcontainer/devcontainer.json<pre><code>{\n  \"name\": \"Go Dev Container\",\n  \"image\": \"mcr.microsoft.com/vscode/devcontainers/go:0-1\",\n  \"settings\": {\n    \"terminal.integrated.shell.linux\": \"/bin/bash\"\n  },\n  \"extensions\": [\n    \"golang.Go\"\n  ]\n}\n</code></pre>"},{"location":"tutorials/go-setup/#explanation","title":"Explanation","text":"<ul> <li><code>name</code>: A friendly label for your container.</li> <li><code>image</code>: Uses a Microsoft-provided Go environment.  </li> <li><code>extensions</code>: Lists the VS Code extensions you want installed automatically (here, the official Go extension).</li> <li>No host installation needed: The container has Go built-in, so your local machine only needs Docker, VS Code, and Git.</li> </ul>"},{"location":"tutorials/go-setup/#4-reopen-in-container","title":"4. Reopen in Container","text":"<ol> <li>Open the <code>hello-go</code> folder in VS Code.</li> <li>If prompted, select \u201cReopen in Container\u201d. Otherwise, open the Command Palette (<code>Ctrl+Shift+P</code> or <code>Cmd+Shift+P</code>) and select:    <pre><code>Dev Containers: Open Folder in Container...\n</code></pre></li> <li>VS Code will build and launch the Dev Container, installing Go and the Go plugin.</li> </ol> <p>Verify Go</p> <p>After the container starts, open a new VS Code terminal and run: <pre><code>go version\n</code></pre> You should see output like <code>go version go1.xx linux/amd64</code>, confirming Go is running inside the container.</p>"},{"location":"tutorials/go-setup/#5-initialize-your-go-module","title":"5. Initialize Your Go Module","text":"<p>In the container\u2019s terminal, initialize a new Go module for your project:</p> <pre><code>go mod init hello-go\n</code></pre> <p>This creates a <code>go.mod</code> file, which tracks your module name (<code>hello-go</code>) and any dependencies you add later.</p>"},{"location":"tutorials/go-setup/#6-write-a-hello-comp423-program","title":"6. Write a \u201cHello COMP423\u201d Program","text":"<p>In your <code>hello-go</code> folder, create a file named <code>main.go</code> with the following code:</p> main.go<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}\n</code></pre>"},{"location":"tutorials/go-setup/#7-build-and-run-your-go-program","title":"7. Build and Run Your Go Program","text":""},{"location":"tutorials/go-setup/#71-using-go-build","title":"7.1 Using <code>go build</code>","text":"<p>Compile your program:</p> <pre><code>go build\n</code></pre> <ul> <li>This command creates a binary named <code>hello-go</code> in your folder.</li> <li>It parallels <code>gcc main.c -o main</code> in a C workflow.</li> </ul> <p>Run the binary directly:</p> <pre><code>./hello-go\n</code></pre> <p>You should see:</p> <pre><code>Hello COMP423\n</code></pre>"},{"location":"tutorials/go-setup/#72-using-go-run","title":"7.2 Using <code>go run</code>","text":"<p>Alternatively, compile and run in one step:</p> <pre><code>go run .\n</code></pre> <ul> <li><code>go run .</code> compiles and runs on the fly, leaving no binary behind.</li> <li><code>go build</code> leaves a standalone executable you can run multiple times.</li> </ul>"},{"location":"tutorials/go-setup/#8-commit-and-push-your-changes","title":"8. Commit and Push Your Changes","text":"<p>When you\u2019re ready:</p> <pre><code>git add .\ngit commit -m \"Initial Go Dev Container setup\"\n</code></pre> <p>Assuming your branch is named main (git branch -M main will ensure this), push to GitHub with a remote repo set up (initialize the repo without a README.md):</p> <pre><code>git remote add origin &lt;your-repo-url&gt;\ngit push -u origin main\n</code></pre>"},{"location":"tutorials/go-setup/#conclusion","title":"Conclusion","text":"<p>With this setup, anyone who clones your repo can open the project in VS Code, run the container, and start coding in Go \u2014 no local Go installation needed.</p>"}]}